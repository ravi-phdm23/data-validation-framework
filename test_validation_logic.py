#!/usr/bin/env python3"""Direct test of the validation logic"""import pandas as pdfrom bigquery_client import execute_custom_queryfrom sql_generator import create_enhanced_transformation_sqldef test_validation_logic():    """Test the validation logic directly"""        print("Testing validation logic...")        # Read the Excel scenario    df = pd.read_excel('S001_Customer_Name_Validation.xlsx')    row = df.iloc[0]        # Create a scenario dict like the one generated by the code    scenario = {        'scenario_name': 'S001_Customer_Full_Name_Validation',        'source_table': 'customers',        'target_table': 'customer_summary',        'source_join_key': 'customer_id',        'target_join_key': 'cust_id',        'target_column': 'calculated_full_name',        'derivation_logic': 'CONCAT(first_name, " ", last_name)',        'reference_table': 'nan'    }        print(f"Scenario: {scenario['scenario_name']}")    print(f"Reference table check: {str(scenario.get('reference_table')).lower() not in ['nan', 'none', '']}")    print(f"Target table check: {str(scenario.get('target_table')).lower() not in ['nan', 'none', '']}")        # Generate SQL using the enhanced transformation function    sql_query = create_enhanced_transformation_sql(        source_table=scenario['source_table'],        target_table=scenario['target_table'],        source_join_key=scenario.get('source_join_key', 'id'),        target_join_key=scenario.get('target_join_key', 'id'),        target_column=scenario['target_column'],        derivation_logic=scenario['derivation_logic'],        project_id='cohesive-apogee-411113',        dataset_id='banking_sample_data'    )        print(f"\nSQL generated: {'Yes' if sql_query else 'No'}")        # Execute the query    if sql_query:        query_result, message = execute_custom_query(sql_query, scenario['scenario_name'])                print(f"Query result status: {query_result.get('status') if query_result else 'None'}")        print(f"Message: {message}")                if query_result and query_result['status'] == 'success':            df_result = query_result['data']                        if df_result is not None and not df_result.empty:                print(f"Rows returned: {len(df_result)}")                print(f"Columns: {df_result.columns.tolist()}")                print(f"Sample data: {df_result.iloc[0].to_dict()}")                                # Apply the same logic as in excel_handler.py                if 'validation_status' in df_result.columns:                    # New format with validation_status column                    status = df_result.iloc[0]['validation_status']                    passed_count = df_result.iloc[0].get('row_count', 1) if status == 'PASS' else 0                    total_count = df_result.iloc[0].get('row_count', 1)                    print(f"\n✅ Validation logic applied:")                    print(f"   Status: {status}")                    print(f"   Passed: {passed_count}")                    print(f"   Total: {total_count}")                elif 'validation_result' in df_result.columns:                    # Old format with validation_result column                    passed_count = len(df_result[df_result['validation_result'] == 'PASS'])                    total_count = len(df_result)                    status = 'PASS' if passed_count == total_count else 'FAIL'                    print(f"\n✅ Old validation logic applied:")                    print(f"   Status: {status}")                    print(f"   Passed: {passed_count}")                    print(f"   Total: {total_count}")                else:                    # If no validation columns, check if we have any rows (failures)                    status = 'FAIL' if len(df_result) > 0 else 'PASS'                    passed_count = 0 if len(df_result) > 0 else 1                    total_count = max(1, len(df_result))                    print(f"\n⚠️ Fallback validation logic applied:")                    print(f"   Status: {status}")                    print(f"   Passed: {passed_count}")                    print(f"   Total: {total_count}")            else:                print("No data returned - typically indicates PASS")                status = 'PASS'                print(f"\n✅ Empty result logic:")                print(f"   Status: {status}")        else:            print("❌ Query failed")    else:        print("❌ No SQL generated")if __name__ == "__main__":    test_validation_logic()